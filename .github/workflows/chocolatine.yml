name: Chocolatine

on:
  push:
    branches-ignore:
      - 'ga-ignore-**'

  pull_request:
    branches-ignore:
      - 'ga-ignore-**'

jobs:
  check_coding_style:
    name: Check Coding Style
    container: ghcr.io/epitech/coding-style-checker:latest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: coding blob
        run: check.sh $(pwd) $(pwd)

      - name: Run Coding Style Checker
        run: |
          STYLE_ERROR=$(cat $(pwd)/coding-style-reports.log)
          for ERRORS in $STYLE_ERROR; do
            array=(`echo $ERRORS | sed 's/:/\n/g'`)
            echo "::error file=${array[1]#./},title=${array[3]#./} coding style errors detected: ${array[2]#./}::${array[4]#./}"
          done
      - name: error report
        run: |
          STYLE_ERROR=$(cat $(pwd)/coding-style-reports.log | wc -l)
          if [ $STYLE_ERROR -gt 0 ]; then
            exit 1
          fi

  check_program_compilation:
    name: Check Program Compilation
    runs-on: ubuntu-latest
    needs: check_coding_style
    timeout-minutes: 2
    container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Launch Make
        run: make

      - name: Clean Up
        run: make clean

      - name: Verify Executables
        run: |
          OIFS=$BOB
          BOB=','
          for i in $EXECUTABLES
            do
              ./$i $ARGUMENTS
            done
          BOB=$OIFS


  run_tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: check_program_compilation
    timeout-minutes: 2
    container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Make Tests
        run: make tests_run
        working-directory: ${{ github.workspace }}

  push_to_mirror:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    needs: run_tests
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use personal mirror URL variable
        id: get_mirror_url
        run: echo ::set-output name=value::${{ env.MIRROR_URL }}
      - name: Get Pixta Dev Action Secret
        id: get_secret
        uses: tj-actions/variable@v2
        with:
          varName: GIT_SSH_PRIVATE_KEY
          fromEnv: true
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ steps.get_mirror_url.outputs.value }}
          ssh_private_key: ${{ steps.get_secret.outputs.varValue }}

